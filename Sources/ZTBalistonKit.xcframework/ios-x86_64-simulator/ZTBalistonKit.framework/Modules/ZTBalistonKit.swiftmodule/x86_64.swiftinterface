// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ZTBalistonKit
import CoreBluetooth
import Foundation
import Swift
import ZTCoreKit
import _Concurrency
@_inheritsConvenienceInitializers public class ZTInsightsPostureChartKneelingData : ZTBalistonKit.ZTInsightsPostureChartObjectData {
  required public init?(map: ZTCoreKit.ZTMap)
  override public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public class ZTInsightsBasePosture : ZTCoreKit.ZTMappable {
  public var totalActivityDuration: Swift.Int
  public var totalPostureValue: Swift.Int
  public var perPeriodAve: Swift.Float
  public var activityDurationTrend: Swift.Int
  public var postureValueTrend: Swift.Int
  public var periodAveTrend: Swift.Int
  public var metrics: [Swift.String : Any]?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZTInsightsPostureChartSlipsData : ZTBalistonKit.ZTInsightsPostureChartObjectData {
  required public init?(map: ZTCoreKit.ZTMap)
  override public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
extension ZTBalistonKit.ZTBaliston {
  public enum Posture : Swift.UInt8 {
    case UNDEFINED
    case STAIR_DOWN
    case STAIR_UP
    case WALK
    case TRAMPLING
    case STANDING
    case TIPTOE
    case KNEELING
    case CROUCHING
    case VIBRATION
    case SLIPS
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
}
public class ZTGaitProfileWalkingSymmetryData : ZTCoreKit.ZTMappable {
  public var timestamp: Foundation.Date?
  public var flightTimeL: Swift.Double
  public var flightTimeR: Swift.Double
  public var contactTimeL: Swift.Double
  public var contactTimeR: Swift.Double
  public var symmetry: Swift.Double?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public class ZTInsightsPostureChartData<T> : ZTCoreKit.ZTMappable where T : ZTCoreKit.ZTMappable {
  public var start: Foundation.Date?
  public var end: Foundation.Date?
  public var charts: [ZTBalistonKit.ZTInsightsPostureChart<T>]?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZTInsightsPostureChartStairsData : ZTBalistonKit.ZTInsightsPostureChartObjectData {
  required public init?(map: ZTCoreKit.ZTMap)
  override public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZTInsightsPosture<T> : ZTBalistonKit.ZTInsightsBasePosture where T : ZTCoreKit.ZTMappable {
  public var chartData: [ZTBalistonKit.ZTInsightsPostureChartData<T>]?
  required public init?(map: ZTCoreKit.ZTMap)
  override public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public enum ZTPostureType : Swift.String {
  case stairsUpCount
  case stairsDownCount
  case stairsCount
  case stairsTime
  case stepsCount
  case standing
  case kneeling
  case tiptoe
  case crouch
  case vibration
  case slip
  case trampling
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ZTPostureChartSeries : Swift.String {
  case standing
  case tiptoe
  case kneeling
  case crouch
  case stepsCount
  case stairsUpCount
  case stairsDownCount
  case stairsCount
  case stairsTime
  case prosupiR
  case prosupiL
  case contactTimeR
  case contactTimeL
  case flightTimeR
  case flightTimeL
  case strideLength
  case walkingSpeed
  case cadence
  case distance
  case walkingTime
  case stairsUpTime
  case stairsDownTime
  case trampling
  case vibration
  case slide
  case slip
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers final public class ZTBalistonActivitySummary : ZTCoreKit.ZTActivitySummary {
  final public var data: [Swift.String : Any]?
  final public var attributes: [Swift.String : Any]?
  required public init?(map: ZTCoreKit.ZTMap)
  override final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ZTBalistonSegmentData : ZTCoreKit.ZTSegmentData {
  @objc deinit
}
extension ZTBalistonKit.ZTBalistonSegmentData {
  @objc dynamic public var description: Swift.String {
    @objc get
  }
}
public class ZTInsightsPostureData : ZTCoreKit.ZTMappable {
  public var timestamp: Swift.String?
  public var stepsCount: Swift.Int?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZTInsightsPostureChartCrouchData : ZTBalistonKit.ZTInsightsPostureChartObjectData {
  required public init?(map: ZTCoreKit.ZTMap)
  override public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public struct ZTBalistonCalibrationMessage : Swift.CustomStringConvertible, Swift.Codable {
  public var bytes: [Swift.UInt8]
  public var isRight: Swift.Bool {
    get
  }
  public var isLeft: Swift.Bool {
    get
  }
  public var standingDone: Swift.Bool {
    get
  }
  public var standingInProgress: Swift.Bool {
    get
  }
  public var standingFailed: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
final public class ZTBalistonActivitySummaryData : ZTCoreKit.ZTMappable {
  final public var chunk: Swift.Int
  final public var timestamp: Swift.Double?
  final public var standing: Swift.Int
  final public var tiptoe: Swift.Int
  final public var kneeling: Swift.Int
  final public var crouch: Swift.Int
  final public var stepsCount: Swift.Int
  final public var stairsUpCount: Swift.Int
  final public var stairsDownCount: Swift.Int
  final public var prosupiR: Swift.Double
  final public var prosupiL: Swift.Double
  final public var contactTimeR: Swift.Int
  final public var contactTimeL: Swift.Int
  final public var flightTimeR: Swift.Int
  final public var flightTimeL: Swift.Int
  final public var strideLength: Swift.Int
  final public var walkingSpeed: Swift.Int
  final public var cadence: Swift.Int
  final public var distance: Swift.Double
  final public var walkingTime: Swift.Int
  final public var stairsUpTime: Swift.Int
  final public var stairsDownTime: Swift.Int
  final public var trampling: Swift.Int
  final public var stairsTime: Swift.Int
  final public var vibration: Swift.Int
  final public var slide: Swift.Int
  final public var slip: Swift.Int
  final public var padding: Swift.Int
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZTInsightsPostureChartTramplingData : ZTBalistonKit.ZTInsightsPostureChartObjectData {
  required public init?(map: ZTCoreKit.ZTMap)
  override public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
extension ZTBalistonKit.ZTBaliston {
  public func startCalibration(completion: @escaping ZTBalistonKit.ZTCalibrationResult)
  public func readCalibration(completion: @escaping ZTBalistonKit.ZTCalibrationResult)
  public func resetCalibration(completion: @escaping ZTCoreKit.ZTBaseResult)
}
public class ZTGaitProfileWalkingAnalysisData : ZTCoreKit.ZTMappable {
  public var timestamp: Foundation.Date?
  public var stepsCount: Swift.Double
  public var strideLength: Swift.Double?
  public var walkingSpeed: Swift.Double?
  public var distance: Swift.Double
  public var cadence: Swift.Double?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public class ZTInsightsPostureChartObjectData : ZTCoreKit.ZTMappable {
  public var timestamp: Foundation.Date?
  public var value: Swift.Int
  public var value2: Swift.Int
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
extension ZTBalistonKit.ZTBaliston {
  public func startMobilityScan(timeout: Swift.Double = 30, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func stopMobilityScan(timeout: Swift.Double = 20, completion: @escaping ((ZTBalistonKit.ZTBalistonActivitySummary?, ZTCoreKit.ZTError?) -> Swift.Void))
  public func startActivity(completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func stopActivity(completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func delay(_ delay: Swift.Double, block: @escaping () -> Swift.Void)
}
public class ZTGaitProfileWalkingSymmetry : ZTCoreKit.ZTMappable {
  public var recommendations: [Swift.String]?
  public var historical: ZTBalistonKit.ZTGaitProfileWalkingSymmetryData?
  public var mostRecent: ZTBalistonKit.ZTGaitProfileWalkingSymmetryData?
  public var symmetry: Swift.Int
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZTInsightsPostureChartStandingData : ZTBalistonKit.ZTInsightsPostureChartObjectData {
  required public init?(map: ZTCoreKit.ZTMap)
  override public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public class ZTInsightsSummary : ZTCoreKit.ZTMappable {
  public var stepsCount: ZTBalistonKit.ZTInsightsSummaryData?
  public var stairsUpCount: ZTBalistonKit.ZTInsightsSummaryData?
  public var stairsDownCount: ZTBalistonKit.ZTInsightsSummaryData?
  public var standing: ZTBalistonKit.ZTInsightsSummaryData?
  public var kneeling: ZTBalistonKit.ZTInsightsSummaryData?
  public var tiptoe: ZTBalistonKit.ZTInsightsSummaryData?
  public var crouch: ZTBalistonKit.ZTInsightsSummaryData?
  public var vibration: ZTBalistonKit.ZTInsightsSummaryData?
  public var slip: ZTBalistonKit.ZTInsightsSummaryData?
  public var trampling: ZTBalistonKit.ZTInsightsSummaryData?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public struct ZTBalistonRealtimeEventMessage : Swift.CustomStringConvertible, Swift.Codable {
  public enum Side {
    case left
    case right
    public static func == (a: ZTBalistonKit.ZTBalistonRealtimeEventMessage.Side, b: ZTBalistonKit.ZTBalistonRealtimeEventMessage.Side) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var side: ZTBalistonKit.ZTBalistonRealtimeEventMessage.Side? {
    get
  }
  public var previousPosture: ZTBalistonKit.ZTBaliston.Posture? {
    get
  }
  public var currentPosture: ZTBalistonKit.ZTBaliston.Posture? {
    get
  }
  public init(bytes: [Swift.UInt8])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension ZTBalistonKit.ZTBalistonRealtimeEventMessage {
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers public class ZTInsightsPostureChartStepsCountData : ZTBalistonKit.ZTInsightsPostureChartObjectData {
  required public init?(map: ZTCoreKit.ZTMap)
  override public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZTInsightsPostureChartTipToeData : ZTBalistonKit.ZTInsightsPostureChartObjectData {
  required public init?(map: ZTCoreKit.ZTMap)
  override public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public class ZTInsightsPostureChart<T> : ZTCoreKit.ZTMappable where T : ZTCoreKit.ZTMappable {
  public var name: Swift.String?
  public var series: [Swift.String]?
  public var data: [T]?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public class ZTInsightsSummaryData : ZTCoreKit.ZTMappable {
  public var today: Swift.Int
  public var alltime: Swift.Int {
    get
  }
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public class ZTGaitProfileWalkingAnalysis : ZTCoreKit.ZTMappable {
  public var recommendations: [Swift.String]?
  public var mostRecent: ZTBalistonKit.ZTGaitProfileWalkingAnalysisData?
  public var historical: ZTBalistonKit.ZTGaitProfileWalkingAnalysisData?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public typealias ZTCalibrationResult = (ZTCoreKit.ZTError?) -> ()
public typealias ZTActivityResult = (Swift.String?, ZTCoreKit.ZTError?) -> Swift.Void
public typealias ZTRealtimePostureResult = (ZTBalistonKit.ZTBalistonRealtimeEventMessage) -> ()
@_hasMissingDesignatedInitializers public class ZTBaliston {
  public static let sdkVersion: Swift.String
  public static let shared: ZTBalistonKit.ZTBaliston
  public var currentPosture: ZTBalistonKit.ZTBaliston.Posture? {
    get
  }
  public var previousPosture: ZTBalistonKit.ZTBaliston.Posture? {
    get
  }
  public var connectedDevice: ZTCoreKit.ZTDevice? {
    get
  }
  public var isActivityRunning: Swift.Bool? {
    get
  }
  public var lastSerialNumber: Swift.String? {
    get
  }
  final public let onActivityStateChange: ZTCoreKit.ZTSignal<(Swift.String?, ZTCoreKit.ZTDeviceActualState, Swift.Error?)>
  final public let onActivityStopped: ZTCoreKit.ZTSignal<(Swift.String?, ZTCoreKit.ZTDeviceActualState, Swift.Error?)>
  final public let onCalibrationStateChanged: ZTCoreKit.ZTSignal<(ZTBalistonKit.ZTBalistonCalibrationMessage)>
  final public let onActivityDataReceived: ZTCoreKit.ZTSignal<(Foundation.Data?)>
  final public let onActivityStopRequestSent: ZTCoreKit.ZTSignal<(Swift.String?, Swift.Error?)>
  final public let onRealtimePosturesChange: ZTCoreKit.ZTSignal<(ZTBalistonKit.ZTBaliston.Posture?)>
  final public let onActivityRestoreStarted: ZTCoreKit.ZTSignal<(Swift.Bool)>
  public func readGeneralState(completion: @escaping ((ZTCoreKit.ZTDeviceActualState?) -> Swift.Void))
  public func setInactivityTimeout(seconds: Foundation.TimeInterval, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func getInactivityTimeout(completion: @escaping ((Swift.Int) -> Swift.Void))
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZTInsightsPostureChartVibrationData : ZTBalistonKit.ZTInsightsPostureChartObjectData {
  required public init?(map: ZTCoreKit.ZTMap)
  override public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZTInsightsPostureChartStepsData : ZTBalistonKit.ZTInsightsPostureChartObjectData {
  required public init?(map: ZTCoreKit.ZTMap)
  override public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class ZTBalistonActivity : ZTCoreKit.ZTActivity {
  override final public func save()
  override public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public class ZTGaitProfilePronation : ZTCoreKit.ZTMappable {
  public var recommendations: [Swift.String]?
  public var firstTime: Swift.Bool
  public var lastPerformedOn: Swift.String?
  public var lastPerformedOnDate: Foundation.Date?
  public var prosupiL: Swift.Int {
    get
  }
  public var prosupiR: Swift.Int {
    get
  }
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
extension ZTBalistonKit.ZTBaliston.Posture : Swift.Equatable {}
extension ZTBalistonKit.ZTBaliston.Posture : Swift.Hashable {}
extension ZTBalistonKit.ZTBaliston.Posture : Swift.RawRepresentable {}
extension ZTBalistonKit.ZTPostureType : Swift.Equatable {}
extension ZTBalistonKit.ZTPostureType : Swift.Hashable {}
extension ZTBalistonKit.ZTPostureType : Swift.RawRepresentable {}
extension ZTBalistonKit.ZTPostureChartSeries : Swift.Equatable {}
extension ZTBalistonKit.ZTPostureChartSeries : Swift.Hashable {}
extension ZTBalistonKit.ZTPostureChartSeries : Swift.RawRepresentable {}
extension ZTBalistonKit.ZTBalistonRealtimeEventMessage.Side : Swift.Equatable {}
extension ZTBalistonKit.ZTBalistonRealtimeEventMessage.Side : Swift.Hashable {}

// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ZTBalistonKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import Foundation
import Swift
import UIKit
import ZTCoreKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension ZTBalistonKit.ZTBaliston {
  @available(*, deprecated, renamed: "initiateBackgroundDFU", message: "This method is deprecated, use method with name `initiateBackgroundDFU`")
  public func updateFirmware(completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  @available(*, deprecated, renamed: "initiateBackgroundDFU", message: "This method is deprecated, use method with name `initiateBackgroundDFU`")
  public func updateFirmware(path: Swift.String, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
}
extension ZTBalistonKit.ZTBaliston {
  public func enableRealtimeStreaming(startDate: Foundation.Date, interval: Swift.Int16 = 1, metrics: Swift.Set<ZTCoreKit.ZTRealtimeMetric>, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func disableRealtimeStreaming(completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func pauseRealtimeStreaming(pause: Swift.Bool, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
}
@_inheritsConvenienceInitializers final public class ZTBalistonActivitySummary : ZTCoreKit.ZTActivitySummary {
  final public var data: [Swift.String : Any]?
  final public var attributes: [Swift.String : Any]?
  required public init?(map: ZTCoreKit.ZTMap)
  override final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ZTBalistonSegmentData : ZTCoreKit.ZTSegmentData {
  override public init(data: Foundation.Data, activityId: Swift.String, fwversion: Swift.String?)
  @objc deinit
}
extension ZTBalistonKit.ZTBalistonSegmentData {
  @objc dynamic public var description: Swift.String {
    @objc get
  }
}
final public class ZTUserDataParameters : Swift.Codable {
  public enum Gender : Swift.UInt8, Swift.Codable {
    case male
    case female
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  final public var threadmillSpeed: Swift.Int?
  final public var bodyWeight: Swift.Int?
  final public var bodyHeight: Swift.Int?
  final public var shoeSize: Swift.Int?
  final public var age: Swift.Int?
  final public var gender: ZTBalistonKit.ZTUserDataParameters.Gender?
  public init(threadmillSpeed: Swift.Int? = nil, bodyWeight: Swift.Int?, bodyHeight: Swift.Int?, shoeSize: Swift.Int?, age: Swift.Int?, gender: ZTBalistonKit.ZTUserDataParameters.Gender?)
  public enum Parameters : Swift.UInt8 {
    case threadmillSpeed
    case bodyWeight
    case bodyHeight
    case shoeSize
    case age
    case gender
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ZTBalistonDfuDelegate {
  func dfuDelegate(firmwareDownloaded: Swift.Bool, version: Swift.String?)
  func dfuDelegate(didFinish: Swift.Bool)
  func dfuDelegate(didFail error: ZTCoreKit.ZTError?)
  func dfuDelegate(progress: Swift.Float?)
  func dfuDelegate(leftDidFinish newVersion: Swift.String?)
  func dfuDelegate(rightDidFinish newVersion: Swift.String?)
}
extension ZTBalistonKit.ZTBaliston : ZTCoreKit.ZTDfuDelegate {
  public func initiateBackgroundDFU(isRestartRequired: Swift.Bool = false)
  public func initiateBackgroundDFU(path: Swift.String)
  public func reboot(completion: @escaping ZTCoreKit.ZTBaseResult)
  public func dfuDelegate(firmwareDownloaded: Swift.Bool, version: Swift.String?)
  public func dfuDelegate(didFinish: Swift.Bool)
  public func dfuDelegate(didFail error: ZTCoreKit.ZTError?)
  public func dfuDelegate(progress: Swift.Float?)
  public func dfuDelegate(leftDidFinish newVersion: Swift.String?)
  public func dfuDelegate(rightDidFinish newVersion: Swift.String?)
}
extension ZTBalistonKit.ZTBaliston {
  public func startMobilityScan(timeout: Swift.Double = 20, duration: Swift.Int = 60, userParameters: ZTBalistonKit.ZTUserDataParameters?, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func stopMobilityScan(timeout: Swift.Double = 20, silently: Swift.Bool = false, completion: @escaping ((ZTBalistonKit.ZTBalistonActivitySummary?, ZTCoreKit.ZTError?) -> Swift.Void))
  public func updateUserParameters(timeout: Swift.Double = 30, userParameters: ZTBalistonKit.ZTUserDataParameters?, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func hardReset(completion: @escaping ZTCoreKit.ZTBaseResult)
}
extension ZTBalistonKit.ZTBaliston {
  public func sendDirectMessage(message: [Swift.String : Any], completion: @escaping (([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void))
  public func getDirectMessages(completion: @escaping (([[Swift.String : Any]]?, (any Swift.Error)?) -> Swift.Void))
  public func deleteDirectMessage(id: Swift.String, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func sendCannedMessage(message: [Swift.String : Any], completion: @escaping ((Any?, (any Swift.Error)?) -> Swift.Void))
  public func getCannedMessages(parameters: [Swift.String : Any], completion: @escaping (([[Swift.String : Any]]?, (any Swift.Error)?) -> Swift.Void))
  public func getTileMessage(name: Swift.String, parameters: [Swift.String : Any], completion: @escaping (([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void))
  public func getMobilityMessage(name: Swift.String, enqueue: Swift.Bool = true, completion: @escaping (([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void))
  public func getMyShoesData(completion: @escaping (([[Swift.String : Any]]?, (any Swift.Error)?) -> Swift.Void))
  public func getMyShoeData(code: Swift.String = "", completion: @escaping (([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void))
  public func startListenMessages(onMessageReceived: @escaping ((Swift.String?) -> Swift.Void), onDataReceived: @escaping ((Foundation.Data?) -> Swift.Void))
  public func stopListenMessages()
  public func postMobility(name: Swift.String, parameters: [Swift.String : Any] = [:], completion: @escaping ((Any?, (any Swift.Error)?) -> Swift.Void))
  public func getActivity(name: Swift.String, parameters: [Swift.String : Any] = [:], completion: @escaping (([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void))
  public func getData(path: Swift.String, name: Swift.String, parameters: [Swift.String : Any] = [:], completion: @escaping ((Any?, (any Swift.Error)?) -> Swift.Void))
  public func getDataArray(path: Swift.String, name: Swift.String, parameters: [Swift.String : Any] = [:], completion: @escaping (([Any]?, (any Swift.Error)?) -> Swift.Void))
  public func postData(path: Swift.String, name: Swift.String, parameters: [Swift.String : Any] = [:], completion: @escaping ((Any?, (any Swift.Error)?) -> Swift.Void))
}
public typealias ZTActivityResult = (Swift.String?, ZTCoreKit.ZTError?) -> Swift.Void
@_hasMissingDesignatedInitializers public class ZTBaliston {
  public static let version: Swift.String
  public static let shared: ZTBalistonKit.ZTBaliston
  public static let requiredFwVersion: Swift.String
  public var dfuDelegate: (any ZTBalistonKit.ZTBalistonDfuDelegate)?
  public var connectedDevice: ZTCoreKit.ZTDevice? {
    get
  }
  public var isActivityRunning: Swift.Bool? {
    get
  }
  public var lastSerialNumber: Swift.String? {
    get
  }
  public var currentActivity: ZTBalistonKit.ZTBalistonActivity? {
    get
  }
  public var currentDfuState: ZTCoreKit.ZTMessageBootloaderInfo.DfuState {
    get
  }
  public var analyticsData: [Swift.String : Any]? {
    get
    set
  }
  public var isStreamingStarted: Swift.Bool {
    get
  }
  final public let onActivityStateChange: ZTCoreKit.ZTSignal<(Swift.String?, ZTCoreKit.ZTDeviceActualState, (any Swift.Error)?)>
  final public let onActivityStopped: ZTCoreKit.ZTSignal<(Swift.String?, ZTCoreKit.ZTDeviceActualState, (any Swift.Error)?)>
  final public let onActivityDataReceived: ZTCoreKit.ZTSignal<()>
  final public let onActivityError: ZTCoreKit.ZTSignal<(ZTCoreKit.ZTError?)>
  final public let onDfuStateUpdated: ZTCoreKit.ZTSignal<(ZTCoreKit.ZTMessageBootloaderInfo.DfuState)>
  final public let onDfuChanged: ZTCoreKit.ZTSignal<(ZTCoreKit.ZTDFUState, ZTCoreKit.ZTError?)>
  final public let onDfuUploadProgress: ZTCoreKit.ZTSignal<(Swift.Float?)>
  final public let onChunksDownloadProgress: ZTCoreKit.ZTSignal<(Swift.Float?)>
  final public let onActivityMetadataUpdated: ZTCoreKit.ZTSignal<(ZTCoreKit.ZTMessageActivityMetadata?)>
  final public let onRealtimeMetricReceived: ZTCoreKit.ZTSignal<(ZTCoreKit.ZTRealtimeMetric?, Any?)>
  final public let onAnalyticsDataUpdated: ZTCoreKit.ZTSignal<()>
  @objc deinit
  public func readGeneralState(completion: @escaping ((ZTCoreKit.ZTDeviceActualState?, ZTCoreKit.ZTError?) -> Swift.Void))
}
@_inheritsConvenienceInitializers final public class ZTBalistonActivity : ZTCoreKit.ZTActivity {
  final public let onActivityMetadataUpdated: ZTCoreKit.ZTSignal<()>
  override final public func save()
  override public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension ZTBalistonKit.ZTBaliston {
  public func setInactivityTimeout(seconds: Foundation.TimeInterval, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func getInactivityTimeout(completion: @escaping ((Swift.Int) -> Swift.Void))
  public func cleanMemory(completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
}
extension ZTBalistonKit.ZTUserDataParameters.Gender : Swift.Equatable {}
extension ZTBalistonKit.ZTUserDataParameters.Gender : Swift.Hashable {}
extension ZTBalistonKit.ZTUserDataParameters.Gender : Swift.RawRepresentable {}
extension ZTBalistonKit.ZTUserDataParameters.Parameters : Swift.Equatable {}
extension ZTBalistonKit.ZTUserDataParameters.Parameters : Swift.Hashable {}
extension ZTBalistonKit.ZTUserDataParameters.Parameters : Swift.RawRepresentable {}

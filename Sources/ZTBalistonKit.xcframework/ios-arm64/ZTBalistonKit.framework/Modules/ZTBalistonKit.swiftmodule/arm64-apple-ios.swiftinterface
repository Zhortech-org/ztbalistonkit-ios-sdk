// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ZTBalistonKit
import CoreBluetooth
import Foundation
import Swift
import ZTCoreKit
import _Concurrency
@_inheritsConvenienceInitializers final public class ZTBalistonActivitySummary : ZTCoreKit.ZTActivitySummary {
  final public var data: [Swift.String : Any]?
  final public var attributes: [Swift.String : Any]?
  required public init?(map: ZTCoreKit.ZTMap)
  override final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ZTBalistonSegmentData : ZTCoreKit.ZTSegmentData {
  @objc deinit
}
extension ZTBalistonKit.ZTBalistonSegmentData {
  @objc dynamic public var description: Swift.String {
    @objc get
  }
}
final public class ZTUserDataParameters : Swift.Codable {
  final public var bodyWeight: Swift.Int?
  final public var bodyHeight: Swift.Int?
  final public var shoeSize: Swift.Int?
  final public var threadmillSpeed: Swift.Int?
  public init(bodyWeight: Swift.Int?, bodyHeight: Swift.Int?, shoeSize: Swift.Int?, threadmillSpeed: Swift.Int? = nil)
  public enum Parameters : Swift.UInt8 {
    case bodyWeight
    case bodyHeight
    case shoeSize
    case threadmillSpeed
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol ZTBalistonDfuDelegate {
  func dfuDelegate(firmwareDownloaded: Swift.Bool, version: Swift.String?)
  func dfuDelegate(didFinish: Swift.Bool)
  func dfuDelegate(didFail error: ZTCoreKit.ZTError?)
  func dfuDelegate(progress: Swift.Float?)
  func dfuDelegate(leftDidFinish newVersion: Swift.String?)
  func dfuDelegate(rightDidFinish newVersion: Swift.String?)
}
extension ZTBalistonKit.ZTBaliston : ZTCoreKit.ZTDfuDelegate {
  public func updateFirmware(completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func updateFirmware(path: Swift.String, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func dfuDelegate(firmwareDownloaded: Swift.Bool, version: Swift.String?)
  public func dfuDelegate(didFinish: Swift.Bool)
  public func dfuDelegate(didFail error: ZTCoreKit.ZTError?)
  public func dfuDelegate(progress: Swift.Float?)
  public func dfuDelegate(leftDidFinish newVersion: Swift.String?)
  public func dfuDelegate(rightDidFinish newVersion: Swift.String?)
}
extension ZTBalistonKit.ZTBaliston {
  public func startMobilityScan(timeout: Swift.Double = 30, userParameters: ZTBalistonKit.ZTUserDataParameters?, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func updateUserParameters(timeout: Swift.Double = 30, userParameters: ZTBalistonKit.ZTUserDataParameters?, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func stopMobilityScan(timeout: Swift.Double = 20, silently: Swift.Bool = false, completion: @escaping ((ZTBalistonKit.ZTBalistonActivitySummary?, ZTCoreKit.ZTError?) -> Swift.Void))
  public func startActivity(completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
}
extension ZTBalistonKit.ZTBaliston {
  public func sendDirectMessage(message: [Swift.String : Any], completion: @escaping (([Swift.String : Any]?, Swift.Error?) -> Swift.Void))
  public func getDirectMessages(completion: @escaping (([[Swift.String : Any]]?, Swift.Error?) -> Swift.Void))
  public func deleteDirectMessage(id: Swift.String, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func sendCannedMessage(message: [Swift.String : Any], completion: @escaping ((Any?, Swift.Error?) -> Swift.Void))
  public func getCannedMessages(parameters: [Swift.String : Any], completion: @escaping (([[Swift.String : Any]]?, Swift.Error?) -> Swift.Void))
  public func getTileMessage(name: Swift.String, parameters: [Swift.String : Any], completion: @escaping (([Swift.String : Any]?, Swift.Error?) -> Swift.Void))
  public func getMobilityMessage(name: Swift.String, enqueue: Swift.Bool = true, completion: @escaping (([Swift.String : Any]?, Swift.Error?) -> Swift.Void))
  public func getMyShoesData(completion: @escaping (([[Swift.String : Any]]?, Swift.Error?) -> Swift.Void))
  public func getMyShoeData(code: Swift.String = "", completion: @escaping (([Swift.String : Any]?, Swift.Error?) -> Swift.Void))
  public func startListenMessages(onMessageReceived: @escaping ((Swift.String?) -> Swift.Void), onDataReceived: @escaping ((Foundation.Data?) -> Swift.Void))
  public func stopListenMessages()
}
public typealias ZTActivityResult = (Swift.String?, ZTCoreKit.ZTError?) -> Swift.Void
@_hasMissingDesignatedInitializers public class ZTBaliston {
  @available(*, deprecated, renamed: "version", message: "Use version property instead")
  public static let sdkVersion: Swift.String
  public static let version: Swift.String
  public static let shared: ZTBalistonKit.ZTBaliston
  public var dfuDelegate: ZTBalistonKit.ZTBalistonDfuDelegate?
  public var connectedDevice: ZTCoreKit.ZTDevice? {
    get
  }
  public var isActivityRunning: Swift.Bool? {
    get
  }
  public var lastSerialNumber: Swift.String? {
    get
  }
  public var currentActivity: ZTBalistonKit.ZTBalistonActivity? {
    get
  }
  final public let onActivityStateChange: ZTCoreKit.ZTSignal<(Swift.String?, ZTCoreKit.ZTDeviceActualState, Swift.Error?)>
  final public let onActivityStopped: ZTCoreKit.ZTSignal<(Swift.String?, ZTCoreKit.ZTDeviceActualState, Swift.Error?)>
  final public let onActivityDataReceived: ZTCoreKit.ZTSignal<(Foundation.Data?)>
  final public let onActivityError: ZTCoreKit.ZTSignal<(ZTCoreKit.ZTError?)>
  @objc deinit
  public func readGeneralState(completion: @escaping ((ZTCoreKit.ZTDeviceActualState?, ZTCoreKit.ZTError?) -> Swift.Void))
}
@_inheritsConvenienceInitializers final public class ZTBalistonActivity : ZTCoreKit.ZTActivity {
  override final public func save()
  override public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ZTBalistonKit.ZTBaliston {
  public func setInactivityTimeout(seconds: Foundation.TimeInterval, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func getInactivityTimeout(completion: @escaping ((Swift.Int) -> Swift.Void))
}
extension ZTBalistonKit.ZTUserDataParameters.Parameters : Swift.Equatable {}
extension ZTBalistonKit.ZTUserDataParameters.Parameters : Swift.Hashable {}
extension ZTBalistonKit.ZTUserDataParameters.Parameters : Swift.RawRepresentable {}
